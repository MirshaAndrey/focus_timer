package main

import (
	"fmt"
	"os"
	"os/exec"
	"os/signal"
	"runtime"
	"time"
)

func main() {
	focusTime := 1 * time.Minute
	breakTime := 5 * time.Minute

	fmt.Println("=== –¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ ===")
	fmt.Printf("–§–æ–∫—É—Å: %v\n", focusTime)
	fmt.Printf("–û—Ç–¥—ã—Ö: %v\n", breakTime)
	fmt.Println("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
	fmt.Println("==========================")

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt)

	for {
		// –§–æ–∫—É—Å
		fmt.Printf("\n‚è±Ô∏è  –§–æ–∫—É—Å: %v\n", focusTime)
		fmt.Println("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å...")

		focusTimer := time.NewTimer(focusTime)
		select {
		case <-focusTimer.C:
			fmt.Println("\nüîî –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ!")
			fmt.Println("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
			notify("focus_end")
		case <-sigChan:
			fmt.Println("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
			return
		}

		fmt.Printf("\n‚òï –û—Ç–¥—ã—Ö: %v\n", breakTime)
		fmt.Println("–û—Ç–¥—ã—Ö–∞–π—Ç–µ, –æ—Ç–≤–ª–µ–∫–∏—Ç–µ—Å—å...")

		breakTimer := time.NewTimer(breakTime)
		select {
		case <-breakTimer.C:
			fmt.Println("\n‚è∞ –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –∏—Å—Ç–µ–∫–ª–æ!")
			fmt.Println("üöÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ!")
			notify("break_end")
		case <-sigChan:
			fmt.Println("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
			return
		}

		fmt.Println("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª...")
		time.Sleep(2 * time.Second)
	}
}

func notify(notificationType string) {
	switch notificationType {
	case "focus_end":
		fmt.Println("üîî –§–û–ö–£–° –ó–ê–í–ï–†–®–ï–ù!")
		fmt.Println("üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–¥–µ–ª–∞–π—Ç–µ –ø–∞—Ä—É –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.")
		fmt.Println("üîÑ –¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞!")
		sendSystemNotification("–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤!")
	case "break_end":
		fmt.Println("üîî –û–¢–î–´–• –ó–ê–í–ï–†–®–ï–ù!")
		fmt.Println("üöÄ –í—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!")
		fmt.Println("üí™ –í—ã –≥–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–π —Ñ–æ–∫—É—Å–Ω–æ–π —Å–µ—Å—Å–∏–∏!")
		sendSystemNotification("–ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω", "–í—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!")
	}

	printNotification()
}

func sendSystemNotification(title, message string) {
	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		cmd = exec.Command("powershell", "-Command", fmt.Sprintf(`
			Add-Type -AssemblyName System.Windows.Forms
			$balloon = New-Object System.Windows.Forms.NotifyIcon
			$balloon.Icon = [System.Drawing.SystemIcons]::Information
			$balloon.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::Info
			$balloon.BalloonTipText = '%s'
			$balloon.BalloonTipTitle = '%s'
			$balloon.Visible = $true
			$balloon.ShowBalloonTip(10000)
		`, message, title))

	case "darwin":
		cmd = exec.Command("osascript", "-e", fmt.Sprintf(`display notification "%s" with title "%s"`, message, title))

	case "linux":
		_, err := exec.LookPath("notify-send")
		if err == nil {
			cmd = exec.Command("notify-send", title, message)
		} else {
			fmt.Printf("‚ö†Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (Linux): %s - %s\n", title, message)
			return
		}
	default:
		fmt.Printf("‚ö†Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s - %s\n", title, message)
		return
	}

	if cmd != nil {
		err := cmd.Run()
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v\n", err)
		}
	}
}

func printNotification() {
	fmt.Println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
	fmt.Println("‚ïë                    Focus Timer                               ‚ïë")
	fmt.Println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
}
